1. install firewall ufw
    $ sudo apt-get install -y ufw
    $ sudo ufw allow ssh
    $ sudo ufw allow http
    $ sudo ufw allow 443/tcp
    $ sudo ufw --force enable
    $ sudo ufw status / status numbered
    to delete a rule: sudo ufw delete ssh
    sudo ufw -h

2. install required services: [redis], [msql-server], [supervisor], [nginx], [git]
    $ sudo apt-get -y update
    $ sudo apt-get -y install python3 python3-venv python3-dev
    $ sudo apt-get -y install mysql-server postfix supervisor nginx git
    $ sudo apt-get install redis-server

3. pull project from git:
    $ git clone https:url

4. create venv and install required python packages:
    $ python -m venv venv
    $ source venv/bin/activate
    // to get gcc: run
    $ sudo apt-get -y install build-essential
    $ pip install -r requirements.txt

    $ pip install gunicorn pymysql

5. create .env file user project folder:
    (check server_env.txt for details)

6. edit .profile file: (or use nano editor)
    $ echo "export FLASK_APP=Aptitude_NGS.py" >> ~/.profile

7. create mysql database:
    after install mysql, root password is empty and log in is based on auth_socket plugin.
    to login, use
    $ sudo mysql -u root.
    then you can update password by
    $ alter user 'root'@'localhost' identified with mysql_native_password by 'new-password';
    restart mysql server:
    sudo service mysql stop
    sudo service mysql start
    mysql> create database DATABASE character set utf8mb4 collate utf8mb4_unicode_ci;
    If app not using existing user, create new user and grant privilege:
    mysql> create user 'ngs_server'@'localhost' identified by '<db-password>';
    mysql> grant all privileges on DATABASE.* to 'app-user'@'localhost';
    mysql> flush privileges;
    mysql> quit;
    to create a remote user;
    create user 'myuser'@'%' identified by 'mypass';
    grant all on *.* to 'myuser'@'%';

    to allow remote access:
    in /etc/mysql/mysql.conf.d/mysqld.cnf
    bind-address = xxx.xxx.xxx.xxx
    set to 0.0.0.0 if don't want to specify ip
    Then in activated project virtual environment,
    flask db init
    Flask db migrate
    Flask db upgrade

8. Setup gunicorn under supervisor control:
    Install supervisor globally: if not already done so.
    Then edit supervisor configures (supervisor_setup folder for details.)
    $ cd /etc/supervisor
    Edit default supervisord.conf:
    at line 22: to config own server.
    [inet_http_server]         ; inet (TCP) server disabled by default
    port=139.162.46.17:9001    ; ip_address:port specifier, *:port for all iface
    username=user              ; default is no username (open server)
    password=123               ; default is no password (open server)
    At end:
    [include]
    files = /etc/supervisor/conf.d/*.conf

    In /etc/supervisor/conf.d sub folder’s directory;
    configure tasks want to be controlled.
    check supervisor folder for details.

    run
    $ sudo supervisorctl reload
    To start or reload the process.
    if no such file or directory file: usr/lib/python2.7/socket.py
    check the /etc/supervisor/supervisor.conf
    change
    [unix_http_server]
    file=<path to supervisor.sock> sometimes it's in /tmp/supervisor.sock, sometimes its in /run/supervisor.sock
    also change
    [supervisorctl]
    serverurl=unix:///<path to superviosr.sock>
    To check status
    $ sudo supervisorctl status all
    Or go to 127.0.0.1:9001 to check. (with password and user name above.)

9. create ssl certificate if need to use https://
    $ mkdir certs
    $ openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -keyout certs/key.pem -out certs/cert.pem

10. setup nginx server configuration:
    add sites configurations at /etc/nginx/sites-enabled
    (check Nginx folder for details)
    To start the nginx server with new configurations:
    $ sudo service nginx reload 
    also, edit /etc/nginx/nginx.conf file for settings:
    http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'; 
                      }

    add blockips.conf to /etc/nginx/conf.d/ folder. 
    


11. setup elastic search server:
    install elastic search (https://tecadmin.net/setup-elasticsearch-on-ubuntu/)
    first install java: (https://linuxize.com/post/install-java-on-ubuntu-18-04/)
    $ sudo apt install default-jdk
    $ java -version
    then install elasticsearch through repo:
    $ sudo apt-get install apt-transport-https
    $ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    $ sudo add-apt-repository "deb https://artifacts.elastic.co/packages/7.x/apt stable main"
    $ sudo apt-get update
    $ sudo apt-get install elasticsearch
    To configure elasticsearch:
    $ sudo nano /etc/elasticsearch/elasticsearch.yml
    To launch elasticsearch as a auto service:
    $ sudo /bin/systemctl enable elasticsearch.service
    To lauch elasticsearch manually:
    $ sudo systemctl start elasticsearch.service
    $ sudo systemctl stop elasticsearch.service
    To check elaticsearch status: goto localhost:9200 or:
    $ curl -X GET "http://localhost:9200/?pretty"
    On ubuntu tomake elastic search a service and auto restart after sytem reboot:
    $ sudo systemctl enable elaticsearch.service
    (https://www.elastic.co/guide/en/elasticsearch/reference/2.1/setup-service.html)

    // on mac os use brew services stop elasticsearch 

13. to automatically update from git:
    put script in usr/local/bin
    run (ngs_shell_script)


14. to setup dnsmasq: (https://www.computers.wtf/posts/dns-in-the-house-with-dnsmasq/)
    0. install dnsmasq and dnsutils
        $ sudo apt install dnsmasq
        $ sudo apt install dnsutils
    1. Ubuntu 18.04 comes with systemd-resolve which you need to disable since it binds to port 53 which will conflict with Dnsmasq port.
        $ sudo systemctl disable systemd-resolved
        $ sudo systemctl stop systemd-resolved
        remove symlinked resolv.conf file.
        $ ls -lh /etc/resolv.conf
        lrwxrwxrwx 1 root root 39 Aug  8 15:52 /etc/resolv.conf -> ../run/systemd/resolve/stub-resolv.conf
        $ sudo rm /etc/resolv.conf

        to disable auto generated resolv.conf by NetworkManager:
        sudo nano /etc/NetworkManager/NetworkManager.conf
        then add dns=dnsmasq under [main]
        this will prevent is from doing weird updates to resolv.conf
        (/etc/NetworkManager/NetworkManager.conf)

        configure dnsmasq to listent to its ip address for dns request:
        (/etc/dnsmasq.conf)
        copy the dnsmasq.conf file to /etc folder
        then start dnsmasq:
        $ sudo systemctl restart dnsmasq.service

        add hosts file to a separate file, at the path in addn-hosts field from dnsmasq.conf file.
        (custom_hosts)

        to log dns ; add following to /etc/dnsmasq.conf
        log-queries
        log-facility=/var/log/dnsmasq.log
        then run 
        $ sudo systemctl restart dnsmasq.service
        $ sudo tail -f /var/log/dnsmasq.log


15. setup PLOJO app .env files
    in ngs_server/app/APPS/.env
    BOKEH_ALLOW_WS_ORIGIN=www.ams.com,localhost:5006,ams.com,h-kang.com,www.h-kang.com,ams.c,www.ams.c,ams


16. to upload large files, gunicorn and nginx have to set a long timeout. default value is 30s.
    in Nginx:
        server { client_max_body_size 0;
        location / {proxy_read_timeout 1200s}}
    in supervisor gunicorn start up: change command to
        command=/home/hui/ngs_server/venv/bin/gunicorn -b localhost:8000 -w 4 --timeout 1200 Aptitude_NGS:app



17. to use supervisord eventlistener, install following packages:
    pip install superlance
    then add supervisor conf.

18. to allow check database folder size:
    run
    sudo chmod a+rwx /var/lib/mysql

19. to enable open ssh
    $ sudo apt update
    $ sudo apt install openssh-server
    then connect by
    ssh username@ip address of server
    sudo systemctl status ssh
    sudo systemctl restart ssh

20. backup and restore mysql server data
    $ sudo apt-get install automysqlbackup
    $ sudo automysqlbackup # to run a manual backup
    $ sudo nano /etc/default/automysqlbackup # to edit settings
    backup folder is in BACKUPDIR
    MDBNAMES is the name to back up. set to "mysql ngs_server" to only backup this table.

21. upgrade nginx server and block ip address. 
    configure ngs_server in sites-enabled folder, add allow ip address in server block.
    in nginx.conf set log format main. 
    To udgrade nginx server to latest version: (https://www.linuxbabe.com/ubuntu/install-nginx-latest-version-ubuntu-18-04#comments)
    Add repo source of nginx: 
    $ sudo nano /etc/apt/sources.list.d/nginx.list
    Add :
    deb [arch=amd64] http://nginx.org/packages/mainline/ubuntu/ bionic nginx
    deb-src http://nginx.org/packages/mainline/ubuntu/ bionic nginx
    Save. 
    $ wget http://nginx.org/keys/nginx_signing.key
    $ sudo apt-key add nginx_signing.key
    $ sudo apt update
    $ sudo apt remove nginx nginx-common nginx-full nginx-core
    $ sudo apt install nginx # choose N to keep using old nginx configures.
    $ sudo nginx -t # test nginx configuration . 
    $ sudo systemctl start nginx # start nginx 
    $ sudo systemctl enable nginx # enable boot time start 
    $ systemctl status nginx  # check status 
    $ sudo systemctl reload nginx # reload nginx 
    Remember to remove default.conf inside the conf.d folder to disable default page. 
    Auto restart Nginx after crash. 
    $ sudo cp /lib/systemd/system/nginx.service /etc/systemd/system/nginx.service 
    $ sudo nano /etc/systemd/system/nginx.service
    Add to following to the [service] section :
    Restart=always # always restart after crash
    RestartSec=2 # restart every 2 seconds after a crash 
    $ sudo systemctl restart nginx. 

22. Jupyter notebook remote access:
    pip install jupyterlab
    then generate config for jupyter: jupyter notebook --generate-config
    Add following edit in the config:
    c.NotebookApp.ip = "*"
    c.NotebookApp.open_browser = False
    c.NotebookApp.notebook_dir = '/'
    c.NotebookApp.allow_password_change = False
    Run > jupyter notebook password 
    to set password for jupyter notebook. 
    Then set up supervisord to auto run jupyter. nano /etc/supervisor/conf.d/jupyter.conf
    