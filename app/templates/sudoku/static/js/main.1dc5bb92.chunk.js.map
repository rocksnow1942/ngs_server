{"version":3,"sources":["index.js"],"names":["Square","props","color","isinit","ishint","text","value","backgroundColor","click","onClick","className","onMouseEnter","onHover","onMouseLeave","style","ThreeByThreeBoard","fill","this","r","hovering","x","y","i","sectorToXY","sec","blockX","blockY","isvalid","push","key","init","hint","e","enter","slice","React","Component","Board","board","j","sudoku","getThreeByThree","getThreeByThreeInit","getThreeByThreeHint","getThreeByThreeValid","Dialog","show","align","height","children","onClose","GameMenu","state","mode","game","modalOpen","modalOnClose","modalContent","message","solution","currentShowing","resetGame","bind","selectMode","newGame","solveGame","clearMenu","showSolutions","showHint","setState","self","curGame","cheated","length","solveGrid","row","col","c","current","showMenu","position","sector","index","fX","fY","target","textContent","toLowerCase","solutionButtons","InputMenu","ele","background","margin","document","addEventListener","removeInputMenu","removeEventListener","Math","floor","noDuplicate","array","filter","Set","size","validateGrid","grid","map","sX","sY","includes","checkGrid","fillGrid","picks","random","shuffle","needbreak","callback","stopcondition","JSON","parse","stringify","Sudoku","Array","attempt","easy","normal","hard","expert","old","count","generateArray","cells","number","validatePosition","num","getRow","getCol","getSector","xyToSector","matrix","Symbol","iterator","next","done","Game","history","handleBoardClick","handleBoardHover","handleMenuClick","clientX","clientY","currentFocus","left","top","fillNumber","checkWon","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1dc5bb92.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './skeleton.css';\nimport './index.css';\n\n\nfunction Square(props) {\n    let color = props.isinit? 'black' : props.ishint? \"green\": \"blue\";\n    let text = props.value !== 0 ? props.value: \"\";\n    let backgroundColor = props.backgroundColor;\n    let click = props.isinit ? null : props.ishint ? null : props.onClick;\n    return (\n        <div className=\"square\">\n            <button className=\"square-inside\"\n                onClick={click}\n                onMouseEnter={props.onHover}\n                onMouseLeave={() => { props.onHover(null) }}\n                style={{color,backgroundColor}}>\n                {text}\n            </button>\n        </div>\n    );\n}\n\n\nclass ThreeByThreeBoard extends React.Component {\n    render() {\n        let fill = this.props.fill;\n        let r = [];\n        let backgroundColor;\n        let [x,y] = this.props.hovering;\n        \n        for (let i=0;i<9;i++) {\n            let [blockX,blockY] = sectorToXY(this.props.sec, i) // this is the curent rendering block.\n            if (!this.props.isvalid[i]) {\n                backgroundColor = '#FF666F'\n            } else if (x===blockX && y === blockY) {\n                backgroundColor = '#DDDDDD'\n            } else if (x === blockX || y===blockY) {\n                backgroundColor = '#F5F5F5'\n            } \n            else {\n                backgroundColor = \"#fff\"\n            }\n            r.push(\n                <Square key= {i} value={fill[i]} isinit={this.props.init[i]} \n                ishint = {this.props.hint[i]}\n                onClick={(e) => this.props.onClick(i,this.props.sec,e)} \n                onHover={(enter)=> {\n                    if(enter!==null) {\n                        this.props.onHover(blockX,blockY)\n                    } else {\n                        this.props.onHover(-1,-1)\n                    }\n                }} \n                backgroundColor ={backgroundColor}\n                isvalid={this.props.isvalid[i]}/>\n            )\n        }\n        return (\n            <div className=\"three-board\">\n                <div className=\"board-row\">\n                    {r.slice(0, 3)}\n                </div>\n                <div className=\"board-row\">\n                    {r.slice(3, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {r.slice(6, 9)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    render() {\n        let board = [];\n        for (let i of [0, 1, 2]) {\n            for (let j of [0, 1, 2]) {\n                board.push(\n                    <ThreeByThreeBoard key={i * 3 + j} fill={this.props.sudoku.getThreeByThree(i, j)} \n                        sec={[i, j]} onClick={this.props.onClick}\n                        onHover = {this.props.onHover} \n                        hovering = {this.props.hovering}\n                        init = {this.props.sudoku.getThreeByThreeInit(i,j)} \n                        hint = {this.props.sudoku.getThreeByThreeHint(i,j)}\n                        isvalid = {this.props.sudoku.getThreeByThreeValid(i,j)}/>\n                )\n            }\n        }\n        return (\n            < div className=\"sudoku\" >\n                \n                < div className=\"board-row\" >\n                    {board.slice(0, 3)}\n                </div >\n                <div className=\"board-row\">\n                    {board.slice(3, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {board.slice(6, 9)}\n                \n                </div>\n            </div >\n        )\n    }\n}\n\nclass Dialog extends React.Component {\n    render () {\n        if (!this.props.show) {return null};\n        return (\n            <div className=\"backdrop\">\n                <div className=\"modal\">\n                    <div align='center' style={{ height:\"40%\"}}>\n                        {this.props.children}\n                    </div>\n                    <hr/>\n                   <div className='row'>\n                       <div className='six columns' align='right'>\n                            <button onClick={() => { this.props.onClose(true) }}>Yes</button>\n                       </div>\n                        <div className='six columns' align='left'>\n                            <button onClick={() => { this.props.onClose(false)}}>No</button>\n                       </div>\n                      \n                   </div>\n                </div>\n            </div>\n        )\n\n    }\n }\n\nclass GameMenu extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {mode:this.props.game.state.mode, \n            modalOpen:false,\n            modalOnClose:null,\n            modalContent:null,\n            message:\"\",\n            solution:[],\n            currentShowing:0};\n        this.resetGame = this.resetGame.bind(this)\n        this.selectMode = this.selectMode.bind(this)\n        this.newGame = this.newGame.bind(this)\n        this.solveGame = this.solveGame.bind(this)\n        this.clearMenu = this.clearMenu.bind(this)\n        this.showSolutions = this.showSolutions.bind(this)\n        this.showHint = this.showHint.bind(this)\n    }\n    clearMenu () {\n        this.setState({ message: \"\", solution: [], currentShowing: 0})\n    }\n    solveGame () {\n        let self = this; \n        this.setState({\n            modalOpen: true, modalOnClose (e) {\n                if (e) {\n                    let curGame = self.props.game.state.sudoku\n                    let solution = [];\n                    curGame.cheated = true;\n                    curGame.solveGame((r) => { solution.push(r) }, ()=>{return solution.length>10})\n                    // Object.assign(mockGame,this.props.game.state.sudoku);\n                    \n                    if (solution.length===1) {\n                        self.props.game.setState({ sudoku: curGame.setState(solution[0]) })\n                    } else if (solution.length===0) {\n                        self.setState({ message: <h5 style={{ 'margin': 'auto' }}>No solution found.</h5>})\n                    } else {\n                        self.props.game.setState({ sudoku: curGame.setState(solution[0]) })\n                        self.setState({ \n                            solution,\n                            currentShowing: 0,\n                            message: <h5 style={{ 'margin': 'auto' }}>Multiple solutions.</h5> })\n                    }\n                   \n                }; self.setState({ modalOpen: false })},\n                modalContent: <h3>Want to give up?</h3>\n        })\n        \n    }\n\n    showHint() {\n        let game = this.props.game;\n        let solution = null;\n        solveGrid(game.state.sudoku.init,(r) => { solution = r }, () => { return solution!==null });\n\n        for (let row=0; row<9;row++) {\n            \n            for (let col=0;col<9;col++) {\n                let c = game.state.sudoku.current[row][col];\n                if (c!==0 && c!==solution[row][col]) {\n                    game.setState((state) => {\n                        let sudoku = state.sudoku;\n                        sudoku.hint[row][col] = sudoku.current[row][col] = solution[row][col];\n                        return { sudoku }\n                    });\n                    return \n                }\n            }\n        }\n        if (game.state.showMenu.position) {\n            let [fX, fY] = sectorToXY(game.state.showMenu.position.sector, game.state.showMenu.position.index);\n            game.setState((state) => {\n                let sudoku = state.sudoku; \n                sudoku.hint[fX][fY] = sudoku.current[fX][fY] = solution[fX][fY];\n                return { sudoku }\n            })\n        } \n    }\n\n    resetGame () {\n        let self = this;\n        this.setState({\n            modalOpen: true, modalOnClose (e){\n                if (e) {\n                    self.clearMenu()\n                    self.props.game.setState((state) => ({\n                        sudoku: state.sudoku.resetGame()\n                    }))};\n                self.setState({modalOpen:false})\n                },\n            modalContent: <h3>Want to reset the current game?</h3>\n                })\n    }\n    newGame () {\n        let self = this;\n        this.setState({\n            modalOpen:true,\n            modalOnClose(e) {\n                if(e) {\n                    self.clearMenu()\n                    self.props.game.setState((state) => ({\n                        sudoku: state.sudoku.newGame(state.mode)\n                    }))\n                };\n                self.setState({modalOpen:false});\n            },\n            modalContent:<h3>Want to start a new game?</h3>\n        })\n    }\n    selectMode (e) {\n        let mode = e.target.textContent.toLowerCase();\n        this.props.game.setState({mode})\n        this.setState({mode})\n    }\n\n    showSolutions(i) {\n        let index = this.state.currentShowing+i;\n        if (index<this.state.solution.length && index>0) {\n           \n            this.props.game.setState({ sudoku: this.props.game.state.sudoku.setState(this.state.solution[index]) })\n            this.setState({currentShowing:index})\n        }\n        \n    }\n\n    render () {\n        let solutionButtons = null;\n        if (this.state.solution.length>1) {\n            solutionButtons = ( <div>\n                <button onClick={() => this.showSolutions(-1)}>Prev</button>\n                <button onClick={() => this.showSolutions(1)}>Next</button> \n            </div> )\n        }\n        return (\n            <div className='gamemenu'>\n                <Dialog show={this.state.modalOpen} onClose={this.state.modalOnClose}> \n                    {this.state.modalContent}\n                </Dialog>\n                <button className=\"button\" onClick={this.resetGame}>Reset</button>\n                <button onClick={this.newGame}>New Game</button>\n                <button onClick = {this.showHint}>Hint</button>\n                <button onClick={this.solveGame}>Solve</button>\n                <button onClick={this.selectMode} className={this.state.mode===\"easy\"? \"selected\":null}>Easy</button>\n                <button onClick={this.selectMode} className={this.state.mode===\"normal\"? \"selected\":null}>Normal</button>\n                <button onClick={this.selectMode} className={this.state.mode===\"hard\"? \"selected\":null}>Hard</button>\n                <button onClick={this.selectMode} className={this.state.mode===\"expert\"? \"selected\":null}>Expert</button>\n                {this.state.message?this.state.message:null}\n                {solutionButtons}\n            </div>\n            \n        )\n    }\n}\n\nclass InputMenu extends React.Component {\n    render() {\n        let ele = []   \n        for (let i=1; i<10; i++) {\n            ele.push(\n                <div key={i}  className=\"square\">\n                    <button className=\"square-inside\" onClick={() => this.props.onClick(i, this.props.showMenu.position)} \n                    style={{ background: 'aqua', \"lineHeight\": \"20px\" }}>\n                      {i}\n                    </button>\n                </div>)\n        }\n\n        return (\n            <div className=\"inputmenu\" style={this.props.showMenu.style}>\n                <div className=\"board-row\">\n                   {ele.slice(0,3)}\n                </div>\n                <div className=\"board-row\">\n                    {ele.slice(3, 6)}\n                </div>\n                <div className=\"board-row\">\n                    {ele.slice(6, 9)}\n                </div>\n               \n                <div className=\"square\" style={{ margin: \"0px\", \"paddingTop\":\"30%\"}}>\n                    <button className=\"square-inside\" onClick={() => this.props.onClick(0, this.props.showMenu.position)}\n                        style={{ background: 'aqua', \"lineHeight\": \"20px\", }}>\n                        Clear\n                    </button>\n\n                </div>\n\n            </div>\n        )  \n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.props.removeInputMenu)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.props.removeInputMenu)\n    }\n  \n}\n\n// convert Sector / Index notation to row,col in the matrix. \nfunction sectorToXY(sector,index) {\n    return [sector[0]*3 + Math.floor(index/3), \n            sector[1]*3 + index % 3]\n}\n// convert x,y of matrix to sector/index \nfunction xyToSector(x,y) {\n    let sX = Math.floor(x/3),\n        sY = Math.floor(y/3),\n        index = (x-sX*3) + 3*(y-sY*3)\n    return [[sX,sY],index]\n}\n\nfunction noDuplicate(array) {\n    array = array.filter(e=>e!==0)\n    return (new Set(array)).size === array.length\n}\n\n\nfunction validateGrid(grid,row,col,i) {\n    let r = grid[row];\n    let c = grid.map(row=>row[col]);\n    let sec = [];\n    let sX = Math.floor(row / 3),\n        sY = Math.floor(col / 3);\n    for (let x = 0; x < 3; x++) {\n        for (let y = 0; y < 3; y++) {\n            sec.push(grid[x + 3 * sX][y + 3 * sY])\n        }\n    }\n    return !r.includes(i) && !c.includes(i) && !sec.includes(i)\n}\n\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n        // swap elements array[i] and array[j]\n        // we use \"destructuring assignment\" syntax to achieve that\n        // you'll find more details about that syntax in later chapters\n        // same can be written as:\n        // let t = array[i]; array[i] = array[j]; array[j] = t\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction checkGrid(grid) {\n    for (let row of grid) {\n        if (row.includes(0)) return false\n    }\n    return true\n}\n\nfunction fillGrid(grid) {\n    const picks=[1,2,3,4,5,6,7,8,9];\n    shuffle(picks)\n    let needbreak = false;\n    for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] === 0) {\n                for (let value of picks) {\n                    if (validateGrid(grid,row,col,value)) {\n                        grid[row][col]=value\n                        if (checkGrid(grid)) return true\n                        else {\n                            if (fillGrid(grid)) {\n                                return true\n                            }\n                        }\n                    };\n                };\n                needbreak = true;\n                grid[row][col] = 0\n                break;\n            }\n        };\n        if (needbreak) {break}\n    }\n}\n\n\nfunction solveGrid(grid,callback,stopcondition) {\n    if (stopcondition()) {return}\n    for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] === 0) {\n                for (let i = 1; i < 10; i++) {\n                    if (validateGrid(grid,row, col, i)) {\n                        grid[row][col] = i\n                        solveGrid(grid,callback,stopcondition)\n                    }\n                    grid[row][col] = 0\n                }\n                return\n            }\n        }\n    }\n    callback(JSON.parse(JSON.stringify(grid)))\n}\n\nclass Sudoku {\n    constructor () {\n        this.init = [\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        ]\n        this.current =JSON.parse(JSON.stringify(this.init))\n        this.hint = Array(9).fill(0).map(x=>Array(9).fill(0))\n        this.cheated = false;\n        this.solveGame = this.solveGame.bind(this);\n    }\n\n    setState (state) {\n        this.current = state\n        return this\n    }\n\n\n    generateArray(mode) {\n        // generate a valid array by random with 1 solution\n        let attempt = {easy:1,normal:5,hard:10,expert:15}[mode];\n        let grid = (Array(9).fill(0).map(x => Array(9).fill(0)));\n        fillGrid(grid)\n        \n        while(attempt>0){\n            let row = Math.floor(Math.random() * 9);\n            let col = Math.floor(Math.random() * 9);\n           \n            let old = grid[row][col];\n            grid[row][col]=0;\n            let count = 0;\n            solveGrid(grid,()=>{count+=1},()=>count>1)\n            if (count>1) {\n                grid[row][col]=old;\n                attempt -= 1\n            }\n        }\n        return grid\n    }\n\n    resetGame() {\n        this.current = JSON.parse(JSON.stringify(this.init))\n        this.hint = Array(9).fill(0).map(x => Array(9).fill(0))\n        this.cheated = false;\n        return this\n    }\n\n    newGame(mode) {\n        this.cheated = false;\n        this.init = this.generateArray(mode)\n        this.hint = Array(9).fill(0).map(x => Array(9).fill(0))\n        this.current = JSON.parse(JSON.stringify(this.init))\n        return this\n    }\n\n    solveGame(callback,stopcondition) {\n        const picks = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        if (stopcondition()) {return}\n        for (let { row, col, number } of this.cells) {\n            if (number === 0) {\n                for (let j of picks) {\n                    this.current[row][col] = j;\n                    if (this.validatePosition(row, col)) {\n                        this.solveGame(callback,stopcondition)\n                    }\n                }\n                this.current[row][col] = 0;\n                return false\n            }\n        } \n        callback(JSON.parse(JSON.stringify(this.current)))\n    }\n\n\n\n    \n\n    fillNumber(sector,index,num) {\n        let [x, y] = sectorToXY(sector,index,);\n        this.current[x][y] = num\n        \n        return this\n    }\n\n    validatePosition(row,col) {\n       return noDuplicate(this.getRow(row)) && noDuplicate(this.getCol(col)) && noDuplicate(this.getSector(row,col))\n    }\n\n    get cells () {\n        let matrix = this.current;\n        return  {[Symbol.iterator]() {\n                return {\n                    index: 0,\n                    next() {\n                        if (this.index === 81) return {done:true}\n                        let row = Math.floor(this.index / 9),\n                            col = this.index % 9;\n                        let number = matrix[row][col];\n                        this.index++;\n                        return { value: { row, col, number }, done:false }\n                    }\n                }\n            }\n        }\n    }\n\n    //get xth row\n    getRow (x) {return this.current[x]}\n\n    // get xth column\n    getCol (x) {return this.current.map(row=>row[x])}\n\n    // get x,y position as sector\n    getSector (x,y) {return this.getThreeByThree(...xyToSector(x,y)[0])}\n\n    checkWon() {\n        if (this.cheated) return false\n        for (let { row, col, number } of this.cells) {\n            if (number === 0) return false;\n            if (!this.validatePosition(row,col)) return false;\n        }\n        return true\n    }\n\n    // get i row, j column in terms of sectors. 3X3\n    getThreeByThree(i,j) {\n        let r = [];\n        for (let x=0; x<3; x++) {\n            for (let y=0; y <3; y++) {\n                r.push(this.current[x+3*i][y+3*j])\n            }\n        }\n        return r\n    }\n\n    getThreeByThreeInit(i,j) {\n        let r = [];\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                r.push(this.init[x + 3 * i][y + 3 * j]!==0)\n            }\n        }\n        return r\n    }\n\n    getThreeByThreeHint(i, j) {\n        let r = [];\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                r.push(this.hint[x + 3 * i][y + 3 * j] !== 0)\n            }\n        }\n        return r\n    }\n\n    getThreeByThreeValid(i,j) {\n        let r = [];\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                r.push(this.validatePosition(x + 3 * i, y + 3 * j))\n            }\n        }\n        return r\n    }\n\n}\n\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            sudoku: new Sudoku(),\n            showMenu:false,\n            hovering:[-1,-1],\n            mode: 'easy',\n        }\n        this.history = [];\n        this.handleBoardClick = this.handleBoardClick.bind(this)\n        this.removeInputMenu = this.removeInputMenu.bind(this)\n        this.handleBoardHover = this.handleBoardHover.bind(this)\n        this.handleMenuClick = this.handleMenuClick.bind(this)\n    \n    }\n\n    handleBoardClick(index,sector,e) {\n        let x = e.clientX, y = e.clientY\n        this.setState({ currentFocus: {index,sector} ,showMenu: { style: { left: x - 100 / 2, top: y - 100 / 2 }, position: { index, sector}}}) \n       \n    }\n\n    handleBoardHover(i,j) {\n        this.setState({hovering:[i,j]})\n    }\n    \n    removeInputMenu(e) {\n        this.setState({ showMenu: false });\n        // document.body.removeEventListener('click', this.removeInputMenu)\n    }\n\n    handleMenuClick(num,{index,sector}) {\n        this.setState((state, props) => ({\n            sudoku: state.sudoku.fillNumber(sector, index, num),\n        }))\n    }\n\n\n    render() {    \n        return (\n            <div className='container'>\n            <h1 align='center'>Sudoku Game </h1>\n            <div className=\"game\">\n                    <Board sudoku = {this.state.sudoku} \n                    hovering = {this.state.hovering}\n                    onClick ={this.handleBoardClick} \n                    onHover = {this.handleBoardHover}\n                    />\n                {this.state.showMenu ? <InputMenu showMenu={this.state.showMenu} onClick={this.handleMenuClick} removeInputMenu={this.removeInputMenu} />: null}\n                <div className=\"game-info\">\n                    {/* <div>{status}</div>\n                    <ol>{moves}</ol> */}\n                    {this.state.sudoku.checkWon()? <h1>You Won!</h1> : null}\n                    <GameMenu game = {this}/>\n                </div>\n            </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}